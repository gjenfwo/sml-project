#!/usr/bin/env sol-fbp-runner

# This file is part of the Soletta (TM) Project
#
# Copyright (C) 2016 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This sample exemplifies the ThingSpeak Talkback feature usage.
#
# TalkBack enables any device to act on queued commands.
#
# So in this example we'll have a smart lock that receives "OPEN"
# commands so it opens, and 10 seconds later it closes.
# It's actually simulated through strings printed on the console.
#
# It keeps polling the server at each 3 seconds.
#
# Usage: ./thingspeak-talkback-smart-lock.fbp
#
# On other process you may run thingspeak-talkback-identify.fbp
# to emit these commands. Or you could just add commands
# directly on ThingsSpeak web interface.
#
# Register at https://thingspeak.com or use another server (and
# update node type options).
#
# There you should create a new Talkback. You need the talkback
# id (not the name) and the API Key. Use these values as
# options for talkback_add and talkback_execute nodes.


# TODO wouldn't be better to accept API_KEY and ID through input ports?
#talkback_id(app/argv:index=1)
#api_key(app/argv:index=2)

talkback_execute(thingspeak/talkback-execute:talkback_id="TALKBACK_ID",api_key="API_KEY")
command(constant/string:value="OPEN")
command_open(string/compare)
timer(timer:interval=10000,enabled=false)
log(console)

command OUT -> IN[0] command_open
talkback_execute OUT -> IN[1] command_open
talkback_execute OUT -> IN log

command_open EQUAL -> IN _(boolean/filter) TRUE -> ENABLED timer
command_open EQUAL -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> RESET timer

timer OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer
timer OUT -> IN _(converter/empty-to-string:output_value="CLOSE") OUT -> IN log
