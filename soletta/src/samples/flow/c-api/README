These examples showcase how to use soletta's C api to write your flows.

Both levels of API are covered:

highlevel: uses the 'builder' API, that will dynamically find node
types given their names, run through the conffile resolver and load
dynamically loadable modules if needed
(${libdir}/soletta/modules/flow). This API will create a lowlevel
representation internally during runtime and is not as efficient, as
well as relies on node type description (introspection information) to
be available, and it will take disk and memory space.

lowlevel: this is the base of all soletta's flow, it will use pointers
to node types, thus they must be available in the process memory space
(either in the application, libsoletta's or third party
libraries). The connections are specified in space-efficient matrices
and it's very light on memory. This API does not use any of the node
type description, thus libsoletta can be compiled without it. Usually
one generates the lowlevel code using sol-fbp-generator tool.

custom-node-type: it is an example on how to write a new node type
using the help of generator tools. Note it will use the files
generated by sol-flow-node-type-gen.py using
custom-node-type-spec.json as input, but one could write that manually
if wanted, it just saves lots of typing.

