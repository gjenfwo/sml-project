# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#Foosball SML
INPORT=goalkeeper1.IN[0]:GOAL_KEEPER1
INPORT=striker1.IN[0]:STRIKER1
INPORT=goalkeeper2.IN[0]:GOAL_KEEPER2
INPORT=striker2.IN[0]:STRIKER2
INPORT=winner1.IN[0]:WINNER1
INPORT=winner2.IN[0]:WINNER2
INPORT=sml.PREDICTION_TRIGGER:PREDICTION_TRIGGER
OUTPORT=predicted_winner1.OUT[0]:PREDICTED_WINNER1
OUTPORT=predicted_winner2.OUT[0]:PREDICTED_WINNER2
OUTPORT=state_end.OUT:PROCESS_END

#state machine
sml_state_machine(int/accumulator:setup_value=val:0:min:0|max:5|step:1)
sml_state_machine OUT -> IN[0] state_start_phase1_eq(int/equal)
state_start_phase1_const(constant/int:value=1) OUT -> IN[1] state_start_phase1_eq
state_start_phase1_eq OUT -> PULSE_IF_TRUE state_start_phase1(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_run_phase1_eq(int/equal)
state_run_phase1_const(constant/int:value=2) OUT -> IN[1] state_run_phase1_eq
state_run_phase1_eq OUT -> PULSE_IF_TRUE state_run_phase1(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_start_phase2_eq(int/equal)
state_start_phase2_const(constant/int:value=3) OUT -> IN[1] state_start_phase2_eq
state_start_phase2_eq OUT -> PULSE_IF_TRUE state_start_phase2(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_run_phase2_eq(int/equal)
state_run_phase2_const(constant/int:value=4) OUT -> IN[1] state_run_phase2_eq
state_run_phase2_eq OUT -> PULSE_IF_TRUE state_run_phase2(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_end_eq(int/equal)
state_end_const(constant/int:value=5) OUT -> IN[1] state_end_eq
state_end_eq OUT -> PULSE_IF_TRUE state_end(converter/boolean-to-empty)

#state machine timer
timer(timer:interval=100) OUT -> INC sml_state_machine
sml_state_machine OUT -> IN timer_stop(converter/int-to-boolean:true_range=min:1|max:5) OUT -> ENABLED timer
winner1 OUT[0] -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer
winner2 OUT[0] -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer

#SML Definition
sml(SML)

goalkeeper1(switcher/int)
striker1(switcher/int)
goalkeeper2(switcher/int)
striker2(switcher/int)

sml_goalkeeper1(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_striker1(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_goalkeeper2(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_striker2(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_winner(converter/int-to-float) OUT -> IN tagger(machine-learning/tagger:tag=winner)
tagger OUT -> OUT_ID_VAR sml

sml OUT -> IN FilterSml(machine-learning/filter:tag=winner)
FilterSml OUT -> IN _(converter/float-to-empty:range=min:0.5|max:1.5) OUT -> IN[0] predicted_winner1(switcher/empty)
FilterSml OUT -> IN _(converter/float-to-empty:range=min:1.5|max:2) OUT -> IN[0] predicted_winner2(switcher/empty)

#Phase 1 - start
state_start_phase1 OUT -> IN phase1_goalkeeper1(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_striker1(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_goalkeeper2(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_striker2(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_winner(converter/empty-to-int)

goalkeeper1 OUT[0] -> OUTPUT_VALUE phase1_goalkeeper1
striker1 OUT[0] -> OUTPUT_VALUE phase1_striker1
goalkeeper2 OUT[0] -> OUTPUT_VALUE phase1_goalkeeper2
striker2 OUT[0] -> OUTPUT_VALUE phase1_striker2
winner1(switcher/empty) OUT[0] -> IN _(converter/empty-to-int:output_value=1,output_value_spec=min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase1_winner
winner2(switcher/empty) OUT[0] -> IN _(converter/empty-to-int:output_value=2,output_value_spec=min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase1_winner

phase1_goalkeeper1 OUT -> IN sml_goalkeeper1
phase1_striker1 OUT -> IN sml_striker1
phase1_goalkeeper2 OUT -> IN sml_goalkeeper2
phase1_striker2 OUT -> IN sml_striker2
phase1_winner OUT -> IN sml_winner

#Phase 1 - run
state_run_phase1 OUT -> TRIGGER sml
state_run_phase1 OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer
sml PROCESS_FINISHED -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer

#Phase 2 - start
state_start_phase2 OUT -> IN phase2_goalkeeper1(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_striker1(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_goalkeeper2(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_striker2(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_winner(converter/empty-to-int)

goalkeeper1 OUT[0] -> OUTPUT_VALUE phase2_goalkeeper1
striker1 OUT[0] -> OUTPUT_VALUE phase2_striker1
goalkeeper2 OUT[0] -> OUTPUT_VALUE phase2_goalkeeper2
striker2 OUT[0] -> OUTPUT_VALUE phase2_striker2
winner1 OUT[0] -> IN _(converter/empty-to-int:output_value=2,output_value_spec=min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase2_winner
winner2 OUT[0] -> IN _(converter/empty-to-int:output_value=1,output_value_spec=min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase2_winner

phase2_goalkeeper2 OUT -> IN sml_goalkeeper1
phase2_striker2 OUT -> IN sml_striker1
phase2_goalkeeper1 OUT -> IN sml_goalkeeper2
phase2_striker1 OUT -> IN sml_striker2
phase2_winner OUT -> IN sml_winner

#Phase 2 - run
state_run_phase2 OUT -> TRIGGER sml
state_run_phase2 OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer

#End
state_end OUT -> IN _(converter/empty-to-int:output_value=0,output_value_spec=min:0|max:2|step:1) OUT -> IN sml_winner

#Prediction phase
goalkeeper1 OUT[0] -> IN sml_goalkeeper1
striker1 OUT[0] -> IN sml_striker1
goalkeeper2 OUT[0] -> IN sml_goalkeeper2
striker2 OUT[0] -> IN sml_striker2
